<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = room_speed

player = self;
Socket = network_create_socket( network_socket_tcp );
isConnected = network_connect( Socket , global.ip , 63258 );
Buffer = buffer_create( 1024 , buffer_fixed , 1 );

playerMap = ds_map_create();
previousAngle = 0;

chatWriting = false;
chatWritten = "";
chatListLength = 10;
chatList[chatListLength] = "";
chatListX = 32;
chatListY = 580;
chatAlpha = 0;
chatAlphaDecrease = 0.05;
chatAlphaDecreaseTime = room_speed/30;
chatAlphaFirstDecreaseTime = room_speed*2;
repeat(chatListLength+1){
chatListAdd("");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(chatAlpha&gt;0){
chatAlpha -= chatAlphaDecrease;
alarm[11] = chatAlphaDecreaseTime;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek( Buffer , buffer_seek_start , 0 );
buffer_write( Buffer , buffer_u8 , 2);
buffer_write( Buffer , buffer_u16, round(player.x));
buffer_write( Buffer , buffer_u16, round(player.y));
buffer_write( Buffer , buffer_u16, round(player.image_angle));
global.Result = network_send_packet( Socket, Buffer , buffer_tell( Buffer ) );

global.Ping++;
alarm[1] = floor(room_speed/20);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//spawnInstance = findSpawnPoint();
player = instance_create(10,10,oPlayerSelf);
alarm[1] = floor(room_speed/10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type_event = ds_map_find_value( async_load , "type" );
switch( type_event ) {
   case network_type_data:
      var buffer = ds_map_find_value( async_load , "buffer" );
      buffer_seek( buffer , buffer_seek_start , 0 );
      ReceivedPacketClient( buffer );
   break;
}
global.Ping = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   network_destroy( Socket );
   buffer_delete( Buffer );
   window_set_cursor(cr_default);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   draw_set_color( c_white );
   draw_text( 5 , 35 , "Connected: " + string( global.Result &gt;= 0 ) );
   draw_text( 5 , 50 , "My Ping: " + string( global.Ping ) );
   
   draw_set_alpha(chatAlpha);
   if(chatWriting){
    draw_set_alpha(1);
    draw_text(chatListX,chatListY+20,"&lt; "+string(chatWritten));
   }
   
   var i = chatListLength;
   repeat(chatListLength+1){
    //if(chatList[i])
    draw_text(chatListX,chatListY-((i)*20),chatList[i]);
    i--;
   }
   draw_set_alpha(1);
   
   
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(keyboard_lastkey){
case vk_enter:
    if(chatWriting){
        if(chatWritten!="" &amp;&amp; chatWritten != " ")
        chatListAdd("&lt; " + chatWritten);

        buffer_seek( Buffer , buffer_seek_start , 0 );
        buffer_write( Buffer , buffer_u8 , 3);
        buffer_write( Buffer , buffer_string, string("&gt; " + global.name + ": " + chatWritten));
        global.Result = network_send_packet( Socket, Buffer , buffer_tell( Buffer ) );
        
        chatWriting=false;
        chatWritten="";
        keyboard_lastkey=-1;
        keyboard_lastchar="";
    }else{
        chatWriting=true;
        chatWritten="";
        keyboard_lastkey=-1;
        keyboard_lastchar="";
    }
break;
case vk_escape:
    if(show_question("Do you want to exit the server?")){
        room_goto(mainMenu);
    }
break;
case vk_backspace:
    chatWritten = string_copy(chatWritten,1,string_length(chatWritten)-1); 
break;
default:
if(chatWriting &amp;&amp; keyboard_lastkey&gt;0){
    if(keyboard_lastchar != "")
        chatWritten+=keyboard_lastchar;

 keyboard_lastchar="";
 keyboard_lastkey=-1;
}
break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
