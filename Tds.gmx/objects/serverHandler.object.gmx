<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hide = false;
alarm[0] = 1;
show_debug_message("Server created");

//global.gamemode = 1;//1 = DM


global.bhost = network_create_server(network_socket_udp, global.bport, global.maxPlayers);


   Server = network_create_server( network_socket_tcp , 63258 , global.maxPlayers );
   Buffer = buffer_create( 1024 , buffer_fixed , 1 );
   SocketList = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.bhost &lt; 0)
{
    show_debug_message('Failed to broadcast server');
    alarm[0] = room_speed*60;
}
else if (hide == false &amp;&amp; global.private == false)//OR server = FULL
{
    var sock = network_create_socket(network_socket_udp);
    buffer_seek(Buffer, buffer_seek_start, 0);
    buffer_write(Buffer, buffer_string, global.serverName);
    buffer_write(Buffer, buffer_u8, global.gamemode);
    buffer_write(Buffer, buffer_u8, global.map);
    buffer_write(Buffer, buffer_u8, ds_list_size( SocketList ) );//amount of players
    buffer_write(Buffer, buffer_u8, global.maxPlayers);//Maxplayers
    network_send_broadcast(sock, global.bport, Buffer, buffer_tell(Buffer));
    network_destroy(sock);
    alarm[0] = room_speed*10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   var type_event = ds_map_find_value( async_load , "type" );
   switch( type_event ) {
      case network_type_connect:
         var socket = ds_map_find_value( async_load , "socket" );

         buffer_seek( Buffer , buffer_seek_start , 0 );
         buffer_write( Buffer , buffer_u8 , 3);
         buffer_write( Buffer , buffer_bool, true);
         buffer_write( Buffer , buffer_u8 , socket);
         sendToOtherClients(socket);
         
         show_debug_message("Sending currently connected players.");
         for (i = 0; i &lt;ds_list_size(serverHandler.SocketList); i++)//Send the guy that has joined, all players.
         {
            resocket = ds_list_find_value(serverHandler.SocketList, i);
            if(resocket != socket)
            {
                buffer_seek( Buffer , buffer_seek_start , 0 );
                buffer_write( Buffer , buffer_u8 , 3);
                buffer_write( Buffer , buffer_bool, true);
                buffer_write( Buffer , buffer_u8 , resocket);
                network_send_packet( socket , Buffer , buffer_tell( Buffer ) );
            }
         } 
         ds_list_add( serverHandler.SocketList , socket );
      break;
      case network_type_disconnect:
         var socket = ds_map_find_value( async_load , "socket" );
         var findsocket = ds_list_find_index( serverHandler.SocketList , socket );
         
         buffer_seek( Buffer , buffer_seek_start , 0 );
         buffer_write( Buffer , buffer_u8 , 3);
         buffer_write( Buffer , buffer_bool, false);
         buffer_write( Buffer , buffer_u8 , socket);
         sendToOtherClients(socket);
         
         if ( findsocket &gt;= 0 ) {
            ds_list_delete( serverHandler.SocketList , findsocket );
         }
      break;
      case network_type_data:
         var buffer = ds_map_find_value( async_load , "buffer" );
         var socket = ds_map_find_value( async_load , "id" );
         buffer_seek( buffer , buffer_seek_start , 0 );
         ReceivedPacketServer( buffer , socket );
      break;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   network_destroy( Server );
   buffer_delete( Buffer );
   ds_list_destroy( SocketList );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>   draw_set_color( c_white );
   draw_text( 5 , 5 , "Server Status: " + string( Server &gt;= 0 ) );
   draw_text( 5 , 20 , "Total Clients: " + string( ds_list_size( SocketList ) ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
