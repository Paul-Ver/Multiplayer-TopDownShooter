<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting up TCP-server
globals.server_socket = network_create_server( network_socket_tcp , globals.port , globals.maxPlayers );
server_buffer = buffer_create( 1024 , buffer_fixed , 1 );
server_socketlist = ds_list_create();

if(globals.server_socket &lt; 0){
    show_message("Failed to start server!");
    room_goto(rm_CreateMatch);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting up broadcast for LAN detection.
if(globals.broadcast){
    globals.bhost = network_create_server(network_socket_udp, globals.bport, globals.maxPlayers);
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup
   network_destroy(globals.server_socket);
   network_destroy(globals.bhost);
   buffer_delete( server_buffer );
   ds_list_destroy( server_socketlist );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send broadcast message.
if (globals.bhost &lt; 0)//Check if we've got a broadcast port.
{
    show_debug_message('Failed to broadcast server');
    if(globals.broadcast){
        globals.bhost = network_create_server(network_socket_udp, globals.bport, globals.maxPlayers);
    }
    alarm[0] = room_speed*60;
}
else if(globals.broadcast == false){}//If private, don't send.
else//Else, send.
{
    var sock = network_create_socket(network_socket_udp);
    buffer_seek(server_buffer, buffer_seek_start, 0);
    buffer_write(server_buffer, buffer_string, globals.serverName);
    buffer_write(server_buffer, buffer_u8, globals.gamemode);
    buffer_write(server_buffer, buffer_u8, globals.map);
    buffer_write(server_buffer, buffer_u8, ds_list_size( server_socketlist ) );//amount of players
    buffer_write(server_buffer, buffer_u8, globals.maxPlayers);//Maxplayers
    network_send_broadcast(sock, globals.bport, server_buffer, buffer_tell(server_buffer));
    network_destroy(sock);
    alarm[0] = room_speed*10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Receive network data.
var n_id = ds_map_find_value(async_load, "id");


if(globals.server_socket == n_id){
var t = ds_map_find_value(async_load, "type");
switch(t)
    {
    case network_type_connect:
        var sock = ds_map_find_value(async_load, "socket");
        show_debug_message("SERVER | Player connected: " + string(sock) + " sending all connected players to him.");
        //The guy that connects, should receive all other people already in the room.
        for (i = 0; i &lt;ds_list_size(server_socketlist); i++)//Send the guy that has joined, all players.
         {
            var player = ds_list_find_value(server_socketlist, i);
            buffer_seek( server_buffer , buffer_seek_start , 0 );
            buffer_write( server_buffer , buffer_u16 , 2);
            buffer_write( server_buffer , buffer_u8 , player);
            network_send_packet( sock , server_buffer , buffer_tell( server_buffer ) );
         }  
        show_debug_message("SERVER | Sending new player to all clients.");
        buffer_seek( server_buffer , buffer_seek_start , 0 );
        buffer_write( server_buffer , buffer_u16 , 2);
        buffer_write( server_buffer , buffer_u8, sock);
        sendToOtherClients(sock);
        ds_list_add(server_socketlist, sock);
        break;
    case network_type_disconnect:
        var sock = ds_map_find_value(async_load, "socket");
        show_debug_message("SERVER | Player disconnected: " + string(sock));
        buffer_seek( server_buffer , buffer_seek_start , 0 );
        buffer_write( server_buffer , buffer_u16 , 3);
        buffer_write( server_buffer , buffer_u8, sock);
        sendToOtherClients(sock);
        ds_map_delete(server_socketlist, sock);
        break;
    }
}else if( n_id == globals.client_socket){
}else{
    serverReceivedPacket(n_id);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GM:S has 3 types</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>1. Connect</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>2. Disconnect</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set room speed
room_speed = 180;
show_debug_message("clienthandler room speed set!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup
   network_destroy( globals.server_socket );
   buffer_delete( server_buffer );
   ds_list_destroy( server_socketlist );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw server stats
draw_set_color( c_white );
draw_text( 5 , 5 , "Server Status: " + string( globals.server_socket &gt;= 0 ) );
draw_text( 5 , 20 , "Total Clients: " + string( ds_list_size( server_socketlist ) ) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
